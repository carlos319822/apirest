/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * OpenAPI spec version: 4.3.2
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { GamePPA } from '../model/gamePPA';
import { PlayWP } from '../model/playWP';
import { PlayerGamePPA } from '../model/playerGamePPA';
import { PlayerSeasonPPA } from '../model/playerSeasonPPA';
import { PredictedPoints } from '../model/predictedPoints';
import { PregameWP } from '../model/pregameWP';
import { TeamPPA } from '../model/teamPPA';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MetricsService {

    protected basePath = 'https://api.collegefootballdata.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Team Predicated Points Added (PPA/EPA) by game
     * Predicted Points Added (PPA) by game
     * @param year Year filter
     * @param week Week filter
     * @param team Team filter
     * @param conference Conference filter
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations
     * @param seasonType Season type filter (regular or postseason)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGamePPA(year: number, week?: number, team?: string, conference?: string, excludeGarbageTime?: boolean, seasonType?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GamePPA>>;
    public getGamePPA(year: number, week?: number, team?: string, conference?: string, excludeGarbageTime?: boolean, seasonType?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GamePPA>>>;
    public getGamePPA(year: number, week?: number, team?: string, conference?: string, excludeGarbageTime?: boolean, seasonType?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GamePPA>>>;
    public getGamePPA(year: number, week?: number, team?: string, conference?: string, excludeGarbageTime?: boolean, seasonType?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling getGamePPA.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (year !== undefined && year !== null) {
            queryParameters = queryParameters.set('year', <any>year);
        }
        if (week !== undefined && week !== null) {
            queryParameters = queryParameters.set('week', <any>week);
        }
        if (team !== undefined && team !== null) {
            queryParameters = queryParameters.set('team', <any>team);
        }
        if (conference !== undefined && conference !== null) {
            queryParameters = queryParameters.set('conference', <any>conference);
        }
        if (excludeGarbageTime !== undefined && excludeGarbageTime !== null) {
            queryParameters = queryParameters.set('excludeGarbageTime', <any>excludeGarbageTime);
        }
        if (seasonType !== undefined && seasonType !== null) {
            queryParameters = queryParameters.set('seasonType', <any>seasonType);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<GamePPA>>(`${this.basePath}/ppa/games`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Player Predicated Points Added (PPA/EPA) broken down by game
     * Predicted Points Added (PPA) by player game
     * @param year Year filter
     * @param week Week filter
     * @param team Team filter
     * @param position Position abbreviation filter
     * @param playerId Player id filter
     * @param threshold Minimum play threshold filter
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations
     * @param seasonType Season type filter (regular or postseason)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPlayerGamePPA(year?: number, week?: number, team?: string, position?: string, playerId?: number, threshold?: string, excludeGarbageTime?: boolean, seasonType?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PlayerGamePPA>>;
    public getPlayerGamePPA(year?: number, week?: number, team?: string, position?: string, playerId?: number, threshold?: string, excludeGarbageTime?: boolean, seasonType?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PlayerGamePPA>>>;
    public getPlayerGamePPA(year?: number, week?: number, team?: string, position?: string, playerId?: number, threshold?: string, excludeGarbageTime?: boolean, seasonType?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PlayerGamePPA>>>;
    public getPlayerGamePPA(year?: number, week?: number, team?: string, position?: string, playerId?: number, threshold?: string, excludeGarbageTime?: boolean, seasonType?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (year !== undefined && year !== null) {
            queryParameters = queryParameters.set('year', <any>year);
        }
        if (week !== undefined && week !== null) {
            queryParameters = queryParameters.set('week', <any>week);
        }
        if (team !== undefined && team !== null) {
            queryParameters = queryParameters.set('team', <any>team);
        }
        if (position !== undefined && position !== null) {
            queryParameters = queryParameters.set('position', <any>position);
        }
        if (playerId !== undefined && playerId !== null) {
            queryParameters = queryParameters.set('playerId', <any>playerId);
        }
        if (threshold !== undefined && threshold !== null) {
            queryParameters = queryParameters.set('threshold', <any>threshold);
        }
        if (excludeGarbageTime !== undefined && excludeGarbageTime !== null) {
            queryParameters = queryParameters.set('excludeGarbageTime', <any>excludeGarbageTime);
        }
        if (seasonType !== undefined && seasonType !== null) {
            queryParameters = queryParameters.set('seasonType', <any>seasonType);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PlayerGamePPA>>(`${this.basePath}/ppa/players/games`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Player Predicated Points Added (PPA/EPA) broken down by season
     * Predicted Points Added (PPA) by player season
     * @param year Year filter
     * @param team Team filter
     * @param conference Conference abbreviation filter
     * @param position Position abbreviation filter
     * @param playerId Player id filter
     * @param threshold Minimum play threshold filter
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPlayerSeasonPPA(year?: number, team?: string, conference?: string, position?: string, playerId?: number, threshold?: string, excludeGarbageTime?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<PlayerSeasonPPA>>;
    public getPlayerSeasonPPA(year?: number, team?: string, conference?: string, position?: string, playerId?: number, threshold?: string, excludeGarbageTime?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PlayerSeasonPPA>>>;
    public getPlayerSeasonPPA(year?: number, team?: string, conference?: string, position?: string, playerId?: number, threshold?: string, excludeGarbageTime?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PlayerSeasonPPA>>>;
    public getPlayerSeasonPPA(year?: number, team?: string, conference?: string, position?: string, playerId?: number, threshold?: string, excludeGarbageTime?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (year !== undefined && year !== null) {
            queryParameters = queryParameters.set('year', <any>year);
        }
        if (team !== undefined && team !== null) {
            queryParameters = queryParameters.set('team', <any>team);
        }
        if (conference !== undefined && conference !== null) {
            queryParameters = queryParameters.set('conference', <any>conference);
        }
        if (position !== undefined && position !== null) {
            queryParameters = queryParameters.set('position', <any>position);
        }
        if (playerId !== undefined && playerId !== null) {
            queryParameters = queryParameters.set('playerId', <any>playerId);
        }
        if (threshold !== undefined && threshold !== null) {
            queryParameters = queryParameters.set('threshold', <any>threshold);
        }
        if (excludeGarbageTime !== undefined && excludeGarbageTime !== null) {
            queryParameters = queryParameters.set('excludeGarbageTime', <any>excludeGarbageTime);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PlayerSeasonPPA>>(`${this.basePath}/ppa/players/season`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Predicted Points (i.e. Expected Points or EP)
     * Predicted Points
     * @param down Down filter
     * @param distance Distance filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPredictedPoints(down: number, distance: number, observe?: 'body', reportProgress?: boolean): Observable<Array<PredictedPoints>>;
    public getPredictedPoints(down: number, distance: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PredictedPoints>>>;
    public getPredictedPoints(down: number, distance: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PredictedPoints>>>;
    public getPredictedPoints(down: number, distance: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (down === null || down === undefined) {
            throw new Error('Required parameter down was null or undefined when calling getPredictedPoints.');
        }

        if (distance === null || distance === undefined) {
            throw new Error('Required parameter distance was null or undefined when calling getPredictedPoints.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (down !== undefined && down !== null) {
            queryParameters = queryParameters.set('down', <any>down);
        }
        if (distance !== undefined && distance !== null) {
            queryParameters = queryParameters.set('distance', <any>distance);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PredictedPoints>>(`${this.basePath}/ppa/predicted`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Pregame win probability data
     * Pregame win probabilities
     * @param year Year filter
     * @param week Week filter
     * @param team Team filter
     * @param seasonType regular or postseason
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPregameWinProbabilities(year?: number, week?: number, team?: string, seasonType?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PregameWP>>;
    public getPregameWinProbabilities(year?: number, week?: number, team?: string, seasonType?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PregameWP>>>;
    public getPregameWinProbabilities(year?: number, week?: number, team?: string, seasonType?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PregameWP>>>;
    public getPregameWinProbabilities(year?: number, week?: number, team?: string, seasonType?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (year !== undefined && year !== null) {
            queryParameters = queryParameters.set('year', <any>year);
        }
        if (week !== undefined && week !== null) {
            queryParameters = queryParameters.set('week', <any>week);
        }
        if (team !== undefined && team !== null) {
            queryParameters = queryParameters.set('team', <any>team);
        }
        if (seasonType !== undefined && seasonType !== null) {
            queryParameters = queryParameters.set('seasonType', <any>seasonType);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PregameWP>>(`${this.basePath}/metrics/wp/pregame`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Predicted Points Added (PPA/EPA) data by team
     * Predicted Points Added (PPA)
     * @param year Year filter (required if team not specified)
     * @param team Team filter (required if year not specified)
     * @param conference Conference filter
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeamPPA(year?: number, team?: string, conference?: string, excludeGarbageTime?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TeamPPA>>;
    public getTeamPPA(year?: number, team?: string, conference?: string, excludeGarbageTime?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TeamPPA>>>;
    public getTeamPPA(year?: number, team?: string, conference?: string, excludeGarbageTime?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TeamPPA>>>;
    public getTeamPPA(year?: number, team?: string, conference?: string, excludeGarbageTime?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (year !== undefined && year !== null) {
            queryParameters = queryParameters.set('year', <any>year);
        }
        if (team !== undefined && team !== null) {
            queryParameters = queryParameters.set('team', <any>team);
        }
        if (conference !== undefined && conference !== null) {
            queryParameters = queryParameters.set('conference', <any>conference);
        }
        if (excludeGarbageTime !== undefined && excludeGarbageTime !== null) {
            queryParameters = queryParameters.set('excludeGarbageTime', <any>excludeGarbageTime);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TeamPPA>>(`${this.basePath}/ppa/teams`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Win probability chart data
     * Win probability data
     * @param gameId Game id filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWinProbabilityData(gameId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<PlayWP>>;
    public getWinProbabilityData(gameId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PlayWP>>>;
    public getWinProbabilityData(gameId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PlayWP>>>;
    public getWinProbabilityData(gameId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling getWinProbabilityData.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (gameId !== undefined && gameId !== null) {
            queryParameters = queryParameters.set('gameId', <any>gameId);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PlayWP>>(`${this.basePath}/metrics/wp`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
